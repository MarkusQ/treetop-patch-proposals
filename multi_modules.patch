diff -ubrN -x '*~' treetop-1.2.5/treetop/lib/treetop/compiler/metagrammar.rb treetop-multi-modules/lib/treetop/compiler/metagrammar.rb
--- treetop-1.2.5/treetop/lib/treetop/compiler/metagrammar.rb	2009-03-11 11:29:34.000000000 -0700
+++ treetop-multi-modules/lib/treetop/compiler/metagrammar.rb	2009-03-15 08:53:43.000000000 -0700
@@ -40,7 +40,7 @@
         if r2
           r1 = r2
         else
-          r1 = SyntaxNode.new(input, index...index)
+          r1 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r1
         if r1
@@ -63,13 +63,13 @@
             if r7
               r6 = r7
             else
-              r6 = SyntaxNode.new(input, index...index)
+              r6 = instantiate_node(SyntaxNode,input, index...index)
             end
             s0 << r6
           end
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(TreetopFile0)
           r0.extend(TreetopFile1)
         else
@@ -130,7 +130,7 @@
         i0, s0 = index, []
         i1, s1 = index, []
         if input.index('module', index) == index
-          r2 = (SyntaxNode).new(input, index...(index + 6))
+          r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
           @index += 6
         else
           terminal_parse_failure('module')
@@ -142,7 +142,7 @@
           s1 << r3
           if r3
             if input.index(Regexp.new('[A-Z]'), index) == index
-              r4 = (SyntaxNode).new(input, index...(index + 1))
+              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               r4 = nil
@@ -158,7 +158,7 @@
                   break
                 end
               end
-              r5 = SyntaxNode.new(input, i5...index, s5)
+              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
               s1 << r5
               if r5
                 r7 = _nt_space
@@ -168,7 +168,7 @@
           end
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(ModuleDeclaration0)
         else
           self.index = i1
@@ -196,7 +196,7 @@
             s11 << r12
             if r12
               if input.index('end', index) == index
-                r13 = (SyntaxNode).new(input, index...(index + 3))
+                r13 = instantiate_node(SyntaxNode,input, index...(index + 3))
                 @index += 3
               else
                 terminal_parse_failure('end')
@@ -205,7 +205,7 @@
               s11 << r13
             end
             if s11.last
-              r11 = (SyntaxNode).new(input, i11...index, s11)
+              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
               r11.extend(ModuleDeclaration1)
             else
               self.index = i11
@@ -215,7 +215,7 @@
           end
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(ModuleDeclaration2)
           r0.extend(ModuleDeclaration3)
         else
@@ -263,7 +263,7 @@
 
         i0, s0 = index, []
         if input.index('grammar', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 7))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
           @index += 7
         else
           terminal_parse_failure('grammar')
@@ -282,7 +282,7 @@
               if r4
                 i6, s6 = index, []
                 if input.index('do', index) == index
-                  r7 = (SyntaxNode).new(input, index...(index + 2))
+                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                   @index += 2
                 else
                   terminal_parse_failure('do')
@@ -294,7 +294,7 @@
                   s6 << r8
                 end
                 if s6.last
-                  r6 = (SyntaxNode).new(input, i6...index, s6)
+                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                   r6.extend(Grammar0)
                 else
                   self.index = i6
@@ -303,7 +303,7 @@
                 if r6
                   r5 = r6
                 else
-                  r5 = SyntaxNode.new(input, index...index)
+                  r5 = instantiate_node(SyntaxNode,input, index...index)
                 end
                 s0 << r5
                 if r5
@@ -314,12 +314,12 @@
                     if r11
                       r10 = r11
                     else
-                      r10 = SyntaxNode.new(input, index...index)
+                      r10 = instantiate_node(SyntaxNode,input, index...index)
                     end
                     s0 << r10
                     if r10
                       if input.index('end', index) == index
-                        r12 = (SyntaxNode).new(input, index...(index + 3))
+                        r12 = instantiate_node(SyntaxNode,input, index...(index + 3))
                         @index += 3
                       else
                         terminal_parse_failure('end')
@@ -334,7 +334,7 @@
           end
         end
         if s0.last
-          r0 = (Grammar).new(input, i0...index, s0)
+          r0 = instantiate_node(Grammar,input, i0...index, s0)
           r0.extend(Grammar1)
         else
           self.index = i0
@@ -359,7 +359,7 @@
 
         i0, s0 = index, []
         if input.index(Regexp.new('[A-Z]'), index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           r1 = nil
@@ -375,11 +375,11 @@
               break
             end
           end
-          r2 = SyntaxNode.new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           s0 << r2
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(GrammarName0)
         else
           self.index = i0
@@ -449,7 +449,7 @@
               s4 << r6
             end
             if s4.last
-              r4 = (SyntaxNode).new(input, i4...index, s4)
+              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
               r4.extend(DeclarationSequence0)
             else
               self.index = i4
@@ -461,11 +461,11 @@
               break
             end
           end
-          r3 = SyntaxNode.new(input, i3...index, s3)
+          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           s1 << r3
         end
         if s1.last
-          r1 = (DeclarationSequence).new(input, i1...index, s1)
+          r1 = instantiate_node(DeclarationSequence,input, i1...index, s1)
           r1.extend(DeclarationSequence1)
           r1.extend(DeclarationSequence2)
         else
@@ -476,7 +476,7 @@
           r0 = r1
         else
           if input.index('', index) == index
-            r7 = (SyntaxNode).new(input, index...(index + 0))
+            r7 = instantiate_node(SyntaxNode,input, index...(index + 0))
             r7.extend(DeclarationSequence3)
             @index += 0
           else
@@ -546,7 +546,7 @@
 
         i0, s0 = index, []
         if input.index('include', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 7))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
           @index += 7
         else
           terminal_parse_failure('include')
@@ -558,7 +558,7 @@
           s0 << r2
           if r2
             if input.index(Regexp.new('[A-Z]'), index) == index
-              r3 = (SyntaxNode).new(input, index...(index + 1))
+              r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               r3 = nil
@@ -573,7 +573,7 @@
                   r5 = r6
                 else
                   if input.index('::', index) == index
-                    r7 = (SyntaxNode).new(input, index...(index + 2))
+                    r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                     @index += 2
                   else
                     terminal_parse_failure('::')
@@ -592,13 +592,13 @@
                   break
                 end
               end
-              r4 = SyntaxNode.new(input, i4...index, s4)
+              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
               s0 << r4
             end
           end
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(IncludeDeclaration0)
           r0.extend(IncludeDeclaration1)
         else
@@ -650,7 +650,7 @@
 
         i0, s0 = index, []
         if input.index('rule', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 4))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
           @index += 4
         else
           terminal_parse_failure('rule')
@@ -669,7 +669,7 @@
               if r4
                 i6, s6 = index, []
                 if input.index('do', index) == index
-                  r7 = (SyntaxNode).new(input, index...(index + 2))
+                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                   @index += 2
                 else
                   terminal_parse_failure('do')
@@ -681,7 +681,7 @@
                   s6 << r8
                 end
                 if s6.last
-                  r6 = (SyntaxNode).new(input, i6...index, s6)
+                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                   r6.extend(ParsingRule0)
                 else
                   self.index = i6
@@ -690,7 +690,7 @@
                 if r6
                   r5 = r6
                 else
-                  r5 = SyntaxNode.new(input, index...index)
+                  r5 = instantiate_node(SyntaxNode,input, index...index)
                 end
                 s0 << r5
                 if r5
@@ -701,7 +701,7 @@
                     s0 << r10
                     if r10
                       if input.index('end', index) == index
-                        r11 = (SyntaxNode).new(input, index...(index + 3))
+                        r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                         @index += 3
                       else
                         terminal_parse_failure('end')
@@ -716,7 +716,7 @@
           end
         end
         if s0.last
-          r0 = (ParsingRule).new(input, i0...index, s0)
+          r0 = instantiate_node(ParsingRule,input, i0...index, s0)
           r0.extend(ParsingRule1)
         else
           self.index = i0
@@ -809,12 +809,12 @@
             if r5
               r4 = r5
             else
-              r4 = SyntaxNode.new(input, index...index)
+              r4 = instantiate_node(SyntaxNode,input, index...index)
             end
             s3 << r4
             if r4
               if input.index('/', index) == index
-                r6 = (SyntaxNode).new(input, index...(index + 1))
+                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 terminal_parse_failure('/')
@@ -826,7 +826,7 @@
                 if r8
                   r7 = r8
                 else
-                  r7 = SyntaxNode.new(input, index...index)
+                  r7 = instantiate_node(SyntaxNode,input, index...index)
                 end
                 s3 << r7
                 if r7
@@ -836,7 +836,7 @@
               end
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(Choice0)
             else
               self.index = i3
@@ -852,12 +852,12 @@
             self.index = i2
             r2 = nil
           else
-            r2 = SyntaxNode.new(input, i2...index, s2)
+            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           end
           s0 << r2
         end
         if s0.last
-          r0 = (Choice).new(input, i0...index, s0)
+          r0 = instantiate_node(Choice,input, i0...index, s0)
           r0.extend(Choice1)
           r0.extend(Choice2)
         else
@@ -936,7 +936,7 @@
               s3 << r5
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(Sequence0)
             else
               self.index = i3
@@ -952,7 +952,7 @@
             self.index = i2
             r2 = nil
           else
-            r2 = SyntaxNode.new(input, i2...index, s2)
+            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           end
           s0 << r2
           if r2
@@ -961,7 +961,7 @@
           end
         end
         if s0.last
-          r0 = (Sequence).new(input, i0...index, s0)
+          r0 = instantiate_node(Sequence,input, i0...index, s0)
           r0.extend(Sequence1)
           r0.extend(Sequence2)
         else
@@ -1110,7 +1110,7 @@
           s1 << r3
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(Primary0)
           r1.extend(Primary1)
         else
@@ -1132,7 +1132,7 @@
             end
           end
           if s4.last
-            r4 = (SyntaxNode).new(input, i4...index, s4)
+            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
             r4.extend(Primary2)
             r4.extend(Primary3)
           else
@@ -1150,7 +1150,7 @@
               s8 << r10
             end
             if s8.last
-              r8 = (SyntaxNode).new(input, i8...index, s8)
+              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
               r8.extend(Primary4)
               r8.extend(Primary5)
             else
@@ -1217,7 +1217,7 @@
           s0 << r2
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(LabeledSequencePrimary0)
           r0.extend(LabeledSequencePrimary1)
         else
@@ -1275,11 +1275,11 @@
               break
             end
           end
-          r4 = SyntaxNode.new(input, i4...index, s4)
+          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
           s2 << r4
         end
         if s2.last
-          r2 = (SyntaxNode).new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           r2.extend(Label0)
         else
           self.index = i2
@@ -1288,7 +1288,7 @@
         s1 << r2
         if r2
           if input.index(':', index) == index
-            r6 = (SyntaxNode).new(input, index...(index + 1))
+            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure(':')
@@ -1297,7 +1297,7 @@
           s1 << r6
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(Label1)
           r1.extend(Label2)
         else
@@ -1308,7 +1308,7 @@
           r0 = r1
         else
           if input.index('', index) == index
-            r7 = (SyntaxNode).new(input, index...(index + 0))
+            r7 = instantiate_node(SyntaxNode,input, index...(index + 0))
             r7.extend(Label3)
             @index += 0
           else
@@ -1401,7 +1401,7 @@
           s1 << r3
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(SequencePrimary0)
           r1.extend(SequencePrimary1)
         else
@@ -1419,7 +1419,7 @@
             s4 << r6
           end
           if s4.last
-            r4 = (SyntaxNode).new(input, i4...index, s4)
+            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
             r4.extend(SequencePrimary2)
             r4.extend(SequencePrimary3)
           else
@@ -1480,7 +1480,7 @@
         end
 
         if input.index('?', index) == index
-          r0 = (Optional).new(input, index...(index + 1))
+          r0 = instantiate_node(Optional,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('?')
@@ -1536,7 +1536,7 @@
           s0 << r2
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(NodeClassDeclarations0)
           r0.extend(NodeClassDeclarations1)
         else
@@ -1559,7 +1559,7 @@
 
         i0 = index
         if input.index('+', index) == index
-          r1 = (OneOrMore).new(input, index...(index + 1))
+          r1 = instantiate_node(OneOrMore,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('+')
@@ -1569,7 +1569,7 @@
           r0 = r1
         else
           if input.index('*', index) == index
-            r2 = (ZeroOrMore).new(input, index...(index + 1))
+            r2 = instantiate_node(ZeroOrMore,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure('*')
@@ -1598,7 +1598,7 @@
 
         i0 = index
         if input.index('&', index) == index
-          r1 = (AndPredicate).new(input, index...(index + 1))
+          r1 = instantiate_node(AndPredicate,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('&')
@@ -1608,7 +1608,7 @@
           r0 = r1
         else
           if input.index('!', index) == index
-            r2 = (NotPredicate).new(input, index...(index + 1))
+            r2 = instantiate_node(NotPredicate,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure('!')
@@ -1618,7 +1618,7 @@
             r0 = r2
           else
             if input.index('~', index) == index
-              r3 = (TransientPrefix).new(input, index...(index + 1))
+              r3 = instantiate_node(TransientPrefix,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure('~')
@@ -1693,7 +1693,7 @@
 
         i0, s0 = index, []
         if input.index('(', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('(')
@@ -1705,7 +1705,7 @@
           if r3
             r2 = r3
           else
-            r2 = SyntaxNode.new(input, index...index)
+            r2 = instantiate_node(SyntaxNode,input, index...index)
           end
           s0 << r2
           if r2
@@ -1716,12 +1716,12 @@
               if r6
                 r5 = r6
               else
-                r5 = SyntaxNode.new(input, index...index)
+                r5 = instantiate_node(SyntaxNode,input, index...index)
               end
               s0 << r5
               if r5
                 if input.index(')', index) == index
-                  r7 = (SyntaxNode).new(input, index...(index + 1))
+                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure(')')
@@ -1733,7 +1733,7 @@
           end
         end
         if s0.last
-          r0 = (ParenthesizedExpression).new(input, i0...index, s0)
+          r0 = instantiate_node(ParenthesizedExpression,input, i0...index, s0)
           r0.extend(ParenthesizedExpression0)
           r0.extend(ParenthesizedExpression1)
         else
@@ -1771,7 +1771,7 @@
           r1 = nil
         else
           self.index = i1
-          r1 = SyntaxNode.new(input, index...index)
+          r1 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r1
         if r1
@@ -1788,11 +1788,11 @@
                 break
               end
             end
-            r5 = SyntaxNode.new(input, i5...index, s5)
+            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
             s3 << r5
           end
           if s3.last
-            r3 = (SyntaxNode).new(input, i3...index, s3)
+            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
             r3.extend(Nonterminal0)
           else
             self.index = i3
@@ -1801,7 +1801,7 @@
           s0 << r3
         end
         if s0.last
-          r0 = (Nonterminal).new(input, i0...index, s0)
+          r0 = instantiate_node(Nonterminal,input, i0...index, s0)
           r0.extend(Nonterminal1)
         else
           self.index = i0
@@ -1900,7 +1900,7 @@
 
         i0, s0 = index, []
         if input.index('"', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('"')
@@ -1913,7 +1913,7 @@
             i3, s3 = index, []
             i4 = index
             if input.index('"', index) == index
-              r5 = (SyntaxNode).new(input, index...(index + 1))
+              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure('"')
@@ -1923,13 +1923,13 @@
               r4 = nil
             else
               self.index = i4
-              r4 = SyntaxNode.new(input, index...index)
+              r4 = instantiate_node(SyntaxNode,input, index...index)
             end
             s3 << r4
             if r4
               i6 = index
               if input.index("\\\\", index) == index
-                r7 = (SyntaxNode).new(input, index...(index + 2))
+                r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                 @index += 2
               else
                 terminal_parse_failure("\\\\")
@@ -1939,7 +1939,7 @@
                 r6 = r7
               else
                 if input.index('\"', index) == index
-                  r8 = (SyntaxNode).new(input, index...(index + 2))
+                  r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                   @index += 2
                 else
                   terminal_parse_failure('\"')
@@ -1949,7 +1949,7 @@
                   r6 = r8
                 else
                   if index < input_length
-                    r9 = (SyntaxNode).new(input, index...(index + 1))
+                    r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                     @index += 1
                   else
                     terminal_parse_failure("any character")
@@ -1966,7 +1966,7 @@
               s3 << r6
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(DoubleQuotedString0)
             else
               self.index = i3
@@ -1978,11 +1978,11 @@
               break
             end
           end
-          r2 = SyntaxNode.new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           s0 << r2
           if r2
             if input.index('"', index) == index
-              r10 = (SyntaxNode).new(input, index...(index + 1))
+              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure('"')
@@ -1992,7 +1992,7 @@
           end
         end
         if s0.last
-          r0 = (Terminal).new(input, i0...index, s0)
+          r0 = instantiate_node(Terminal,input, i0...index, s0)
           r0.extend(DoubleQuotedString1)
         else
           self.index = i0
@@ -2024,7 +2024,7 @@
 
         i0, s0 = index, []
         if input.index("'", index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure("'")
@@ -2037,7 +2037,7 @@
             i3, s3 = index, []
             i4 = index
             if input.index("'", index) == index
-              r5 = (SyntaxNode).new(input, index...(index + 1))
+              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("'")
@@ -2047,13 +2047,13 @@
               r4 = nil
             else
               self.index = i4
-              r4 = SyntaxNode.new(input, index...index)
+              r4 = instantiate_node(SyntaxNode,input, index...index)
             end
             s3 << r4
             if r4
               i6 = index
               if input.index("\\\\", index) == index
-                r7 = (SyntaxNode).new(input, index...(index + 2))
+                r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                 @index += 2
               else
                 terminal_parse_failure("\\\\")
@@ -2063,7 +2063,7 @@
                 r6 = r7
               else
                 if input.index("\\'", index) == index
-                  r8 = (SyntaxNode).new(input, index...(index + 2))
+                  r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                   @index += 2
                 else
                   terminal_parse_failure("\\'")
@@ -2073,7 +2073,7 @@
                   r6 = r8
                 else
                   if index < input_length
-                    r9 = (SyntaxNode).new(input, index...(index + 1))
+                    r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                     @index += 1
                   else
                     terminal_parse_failure("any character")
@@ -2090,7 +2090,7 @@
               s3 << r6
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(SingleQuotedString0)
             else
               self.index = i3
@@ -2102,11 +2102,11 @@
               break
             end
           end
-          r2 = SyntaxNode.new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           s0 << r2
           if r2
             if input.index("'", index) == index
-              r10 = (SyntaxNode).new(input, index...(index + 1))
+              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("'")
@@ -2116,7 +2116,7 @@
           end
         end
         if s0.last
-          r0 = (Terminal).new(input, i0...index, s0)
+          r0 = instantiate_node(Terminal,input, i0...index, s0)
           r0.extend(SingleQuotedString1)
         else
           self.index = i0
@@ -2160,7 +2160,7 @@
 
         i0, s0 = index, []
         if input.index('[', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('[')
@@ -2173,7 +2173,7 @@
             i3, s3 = index, []
             i4 = index
             if input.index(']', index) == index
-              r5 = (SyntaxNode).new(input, index...(index + 1))
+              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure(']')
@@ -2183,14 +2183,14 @@
               r4 = nil
             else
               self.index = i4
-              r4 = SyntaxNode.new(input, index...index)
+              r4 = instantiate_node(SyntaxNode,input, index...index)
             end
             s3 << r4
             if r4
               i6 = index
               i7, s7 = index, []
               if input.index('\\', index) == index
-                r8 = (SyntaxNode).new(input, index...(index + 1))
+                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 terminal_parse_failure('\\')
@@ -2199,7 +2199,7 @@
               s7 << r8
               if r8
                 if index < input_length
-                  r9 = (SyntaxNode).new(input, index...(index + 1))
+                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure("any character")
@@ -2208,7 +2208,7 @@
                 s7 << r9
               end
               if s7.last
-                r7 = (SyntaxNode).new(input, i7...index, s7)
+                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                 r7.extend(CharacterClass0)
               else
                 self.index = i7
@@ -2220,7 +2220,7 @@
                 i10, s10 = index, []
                 i11 = index
                 if input.index('\\', index) == index
-                  r12 = (SyntaxNode).new(input, index...(index + 1))
+                  r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure('\\')
@@ -2230,12 +2230,12 @@
                   r11 = nil
                 else
                   self.index = i11
-                  r11 = SyntaxNode.new(input, index...index)
+                  r11 = instantiate_node(SyntaxNode,input, index...index)
                 end
                 s10 << r11
                 if r11
                   if index < input_length
-                    r13 = (SyntaxNode).new(input, index...(index + 1))
+                    r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                     @index += 1
                   else
                     terminal_parse_failure("any character")
@@ -2244,7 +2244,7 @@
                   s10 << r13
                 end
                 if s10.last
-                  r10 = (SyntaxNode).new(input, i10...index, s10)
+                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                   r10.extend(CharacterClass1)
                 else
                   self.index = i10
@@ -2260,7 +2260,7 @@
               s3 << r6
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(CharacterClass2)
             else
               self.index = i3
@@ -2276,12 +2276,12 @@
             self.index = i2
             r2 = nil
           else
-            r2 = SyntaxNode.new(input, i2...index, s2)
+            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           end
           s0 << r2
           if r2
             if input.index(']', index) == index
-              r14 = (SyntaxNode).new(input, index...(index + 1))
+              r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure(']')
@@ -2291,7 +2291,7 @@
           end
         end
         if s0.last
-          r0 = (CharacterClass).new(input, i0...index, s0)
+          r0 = instantiate_node(CharacterClass,input, i0...index, s0)
           r0.extend(CharacterClass3)
           r0.extend(CharacterClass4)
         else
@@ -2313,7 +2313,7 @@
         end
 
         if input.index('.', index) == index
-          r0 = (AnythingSymbol).new(input, index...(index + 1))
+          r0 = instantiate_node(AnythingSymbol,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('.')
@@ -2337,7 +2337,7 @@
 
       module NodeClassExpression2
         def node_class_name
-          elements[2].text_value
+          "[#{elements[2].text_value}]"
         end
       end
 
@@ -2361,7 +2361,7 @@
         s1 << r2
         if r2
           if input.index('<', index) == index
-            r3 = (SyntaxNode).new(input, index...(index + 1))
+            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure('<')
@@ -2374,7 +2374,7 @@
               i5, s5 = index, []
               i6 = index
               if input.index('>', index) == index
-                r7 = (SyntaxNode).new(input, index...(index + 1))
+                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 terminal_parse_failure('>')
@@ -2384,12 +2384,12 @@
                 r6 = nil
               else
                 self.index = i6
-                r6 = SyntaxNode.new(input, index...index)
+                r6 = instantiate_node(SyntaxNode,input, index...index)
               end
               s5 << r6
               if r6
                 if index < input_length
-                  r8 = (SyntaxNode).new(input, index...(index + 1))
+                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure("any character")
@@ -2398,7 +2398,7 @@
                 s5 << r8
               end
               if s5.last
-                r5 = (SyntaxNode).new(input, i5...index, s5)
+                r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
                 r5.extend(NodeClassExpression0)
               else
                 self.index = i5
@@ -2414,12 +2414,12 @@
               self.index = i4
               r4 = nil
             else
-              r4 = SyntaxNode.new(input, i4...index, s4)
+              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
             end
             s1 << r4
             if r4
               if input.index('>', index) == index
-                r9 = (SyntaxNode).new(input, index...(index + 1))
+                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 terminal_parse_failure('>')
@@ -2430,7 +2430,7 @@
           end
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(NodeClassExpression1)
           r1.extend(NodeClassExpression2)
         else
@@ -2441,7 +2441,7 @@
           r0 = r1
         else
           if input.index('', index) == index
-            r10 = (SyntaxNode).new(input, index...(index + 0))
+            r10 = instantiate_node(SyntaxNode,input, index...(index + 0))
             r10.extend(NodeClassExpression3)
             @index += 0
           else
@@ -2512,7 +2512,7 @@
           s1 << r3
         end
         if s1.last
-          r1 = (SyntaxNode).new(input, i1...index, s1)
+          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
           r1.extend(TrailingInlineModule0)
           r1.extend(TrailingInlineModule1)
         else
@@ -2523,7 +2523,7 @@
           r0 = r1
         else
           if input.index('', index) == index
-            r4 = (SyntaxNode).new(input, index...(index + 0))
+            r4 = instantiate_node(SyntaxNode,input, index...(index + 0))
             r4.extend(TrailingInlineModule2)
             @index += 0
           else
@@ -2559,7 +2559,7 @@
 
         i0, s0 = index, []
         if input.index('{', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('{')
@@ -2577,7 +2577,7 @@
               i5, s5 = index, []
               i6 = index
               if input.index(Regexp.new('[{}]'), index) == index
-                r7 = (SyntaxNode).new(input, index...(index + 1))
+                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 r7 = nil
@@ -2586,12 +2586,12 @@
                 r6 = nil
               else
                 self.index = i6
-                r6 = SyntaxNode.new(input, index...index)
+                r6 = instantiate_node(SyntaxNode,input, index...index)
               end
               s5 << r6
               if r6
                 if index < input_length
-                  r8 = (SyntaxNode).new(input, index...(index + 1))
+                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure("any character")
@@ -2600,7 +2600,7 @@
                 s5 << r8
               end
               if s5.last
-                r5 = (SyntaxNode).new(input, i5...index, s5)
+                r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
                 r5.extend(InlineModule0)
               else
                 self.index = i5
@@ -2619,11 +2619,11 @@
               break
             end
           end
-          r2 = SyntaxNode.new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           s0 << r2
           if r2
             if input.index('}', index) == index
-              r9 = (SyntaxNode).new(input, index...(index + 1))
+              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure('}')
@@ -2633,7 +2633,7 @@
           end
         end
         if s0.last
-          r0 = (InlineModule).new(input, i0...index, s0)
+          r0 = instantiate_node(InlineModule,input, i0...index, s0)
           r0.extend(InlineModule1)
         else
           self.index = i0
@@ -2659,7 +2659,7 @@
         i0, s0 = index, []
         i1 = index
         if input.index('rule', index) == index
-          r2 = (SyntaxNode).new(input, index...(index + 4))
+          r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
           @index += 4
         else
           terminal_parse_failure('rule')
@@ -2669,7 +2669,7 @@
           r1 = r2
         else
           if input.index('end', index) == index
-            r3 = (SyntaxNode).new(input, index...(index + 3))
+            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
             @index += 3
           else
             terminal_parse_failure('end')
@@ -2690,12 +2690,12 @@
             r4 = nil
           else
             self.index = i4
-            r4 = SyntaxNode.new(input, index...index)
+            r4 = instantiate_node(SyntaxNode,input, index...index)
           end
           s0 << r4
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(KeywordInsideGrammar0)
         else
           self.index = i0
@@ -2725,12 +2725,12 @@
           r1 = nil
         else
           self.index = i1
-          r1 = SyntaxNode.new(input, index...index)
+          r1 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r1
         if r1
           if index < input_length
-            r3 = (SyntaxNode).new(input, index...(index + 1))
+            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure("any character")
@@ -2739,7 +2739,7 @@
           s0 << r3
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(NonSpaceChar0)
         else
           self.index = i0
@@ -2760,7 +2760,7 @@
         end
 
         if input.index(Regexp.new('[A-Za-z_]'), index) == index
-          r0 = (SyntaxNode).new(input, index...(index + 1))
+          r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           r0 = nil
@@ -2785,7 +2785,7 @@
           r0 = r1
         else
           if input.index(Regexp.new('[0-9]'), index) == index
-            r2 = (SyntaxNode).new(input, index...(index + 1))
+            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             r2 = nil
@@ -2836,7 +2836,7 @@
           self.index = i0
           r0 = nil
         else
-          r0 = SyntaxNode.new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
         end
 
         node_cache[:space][start_index] = r0
@@ -2860,7 +2860,7 @@
 
         i0, s0 = index, []
         if input.index('#', index) == index
-          r1 = (SyntaxNode).new(input, index...(index + 1))
+          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('#')
@@ -2873,7 +2873,7 @@
             i3, s3 = index, []
             i4 = index
             if input.index("\n", index) == index
-              r5 = (SyntaxNode).new(input, index...(index + 1))
+              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("\n")
@@ -2883,12 +2883,12 @@
               r4 = nil
             else
               self.index = i4
-              r4 = SyntaxNode.new(input, index...index)
+              r4 = instantiate_node(SyntaxNode,input, index...index)
             end
             s3 << r4
             if r4
               if index < input_length
-                r6 = (SyntaxNode).new(input, index...(index + 1))
+                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                 @index += 1
               else
                 terminal_parse_failure("any character")
@@ -2897,7 +2897,7 @@
               s3 << r6
             end
             if s3.last
-              r3 = (SyntaxNode).new(input, i3...index, s3)
+              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
               r3.extend(CommentToEol0)
             else
               self.index = i3
@@ -2909,11 +2909,11 @@
               break
             end
           end
-          r2 = SyntaxNode.new(input, i2...index, s2)
+          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
           s0 << r2
         end
         if s0.last
-          r0 = (SyntaxNode).new(input, i0...index, s0)
+          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
           r0.extend(CommentToEol1)
         else
           self.index = i0
@@ -2934,7 +2934,7 @@
         end
 
         if input.index(Regexp.new('[ \\t\\n\\r]'), index) == index
-          r0 = (SyntaxNode).new(input, index...(index + 1))
+          r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           r0 = nil
diff -ubrN -x '*~' treetop-1.2.5/treetop/lib/treetop/compiler/metagrammar.treetop treetop-multi-modules/lib/treetop/compiler/metagrammar.treetop
--- treetop-1.2.5/treetop/lib/treetop/compiler/metagrammar.treetop	2009-03-11 11:29:34.000000000 -0700
+++ treetop-multi-modules/lib/treetop/compiler/metagrammar.treetop	2009-03-15 08:03:18.000000000 -0700
@@ -331,7 +331,7 @@
       rule node_class_expression
         space '<' (!'>' .)+ '>' {
           def node_class_name
-            elements[2].text_value
+            "[#{elements[2].text_value}]"
           end
         }
         /
diff -ubrN -x '*~' treetop-1.2.5/treetop/lib/treetop/compiler/node_classes/parsing_expression.rb treetop-multi-modules/lib/treetop/compiler/node_classes/parsing_expression.rb
--- treetop-1.2.5/treetop/lib/treetop/compiler/node_classes/parsing_expression.rb	2009-03-11 11:29:34.000000000 -0700
+++ treetop-multi-modules/lib/treetop/compiler/node_classes/parsing_expression.rb	2009-03-15 08:28:27.000000000 -0700
@@ -67,8 +67,12 @@
       end
       
       def extend_result(module_name)
+        if module_name.is_a? Array
+            module_name.each { |part| extend_result part }
+          else 
         builder.extend result_var, module_name
       end
+      end
 
       def extend_result_with_declared_module
         extend_result declared_module_name if declared_module_name
@@ -83,7 +87,7 @@
       end
       
       def epsilon_node
-        "instantiate_node(SyntaxNode,input, index...index)"
+        "instantiate_node([],input, index...index)"
       end
       
       def assign_failure(start_index_var)
diff -ubrN -x '*~' treetop-1.2.5/treetop/lib/treetop/compiler/ruby_builder.rb treetop-multi-modules/lib/treetop/compiler/ruby_builder.rb
--- treetop-1.2.5/treetop/lib/treetop/compiler/ruby_builder.rb	2009-03-11 11:29:34.000000000 -0700
+++ treetop-multi-modules/lib/treetop/compiler/ruby_builder.rb	2009-03-15 09:41:03.000000000 -0700
@@ -51,8 +51,8 @@
         end
       end
       
-      def extend(var, module_name)
-        self << "#{var}.extend(#{module_name})"
+      def extend(var, module_names)
+        self << "extend_node(#{var},#{module_names})"
       end
       
       def accumulate(left, right)
diff -ubrN -x '*~' treetop-1.2.5/treetop/lib/treetop/runtime/compiled_parser.rb treetop-multi-modules/lib/treetop/runtime/compiled_parser.rb
--- treetop-1.2.5/treetop/lib/treetop/runtime/compiled_parser.rb	2009-03-11 11:29:34.000000000 -0700
+++ treetop-multi-modules/lib/treetop/runtime/compiled_parser.rb	2009-03-15 09:35:10.000000000 -0700
@@ -73,12 +73,14 @@
         end
       end
     
-      def instantiate_node(node_type,*args)
-        if node_type.respond_to? :new 
-          node_type.new(*args)
-        else
-          SyntaxNode.new(*args).extend(node_type)
+      def instantiate_node(modules,*args)
+        modules = [modules].flatten
+        base_class = ((modules.first.respond_to? :new) ? modules.shift : SyntaxNode)
+        extend_node(base_class.new(*args),modules)
         end
+
+      def extend_node(node,*modules)
+        modules.flatten.inject(node) { |n,t| n.extend(t) }
       end
     
       def terminal_parse_failure(expected_string)
diff -ubrN -x '*~' treetop-1.2.5/treetop/spec/runtime/multi_modules_spec.rb treetop-multi-modules/spec/runtime/multi_modules_spec.rb
--- treetop-1.2.5/treetop/spec/runtime/multi_modules_spec.rb	1969-12-31 16:00:00.000000000 -0800
+++ treetop-multi-modules/spec/runtime/multi_modules_spec.rb	2009-03-14 19:00:16.000000000 -0700
@@ -0,0 +1,46 @@
+require File.expand_path("#{File.dirname(__FILE__)}/../spec_helper")
+
+module MultiModulesSpec
+  class Foo < Treetop::Runtime::SyntaxNode
+  end
+
+  module ModFoo
+  end
+
+  module ModFoo1
+  end
+
+  module ModFoo2
+  end
+
+  describe "a terminal symbol followed by a node class declaration containing a class and multiple modules and a block" do
+    testing_expression "'foo' <MultiModulesSpec::Foo,MultiModulesSpec::ModFoo1,MultiModulesSpec::ModFoo2> { def a_method; end }"
+
+    it "correctly parses matching input, returning a properly extended instance of the declared class" do
+      parse "foo" do |result|
+        result.should be_an_instance_of(Foo)
+        result.should be_a_kind_of(ModFoo1)
+        result.should be_a_kind_of(ModFoo2)
+        result.should respond_to(:a_method)
+      end
+
+    end
+
+  end
+
+  describe "a terminal symbol followed by a node class declaration containing a class and multiple modules and a block" do
+    testing_expression "'foo' <MultiModulesSpec::ModFoo,MultiModulesSpec::ModFoo1,MultiModulesSpec::ModFoo2> { def a_method; end }"
+
+    it "correctly parses matching input prefixes at various indices, returning a properly extended instance of SyntaxNode" do
+      parse "foo", :index => 0 do |result|
+        result.should be_an_instance_of(Treetop::Runtime::SyntaxNode)
+        result.should be_a_kind_of(ModFoo)
+        result.should be_a_kind_of(ModFoo1)
+        result.should be_a_kind_of(ModFoo2)
+        result.should respond_to(:a_method)
+      end
+
+    end
+  end
+
+end
